datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String    @id @default(cuid())
  name     String?
  image    String?
  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Role      Role[]
  Order     Order[]

  firstName            String      @default("")
  lastName             String      @default("")
  address              String      @default("")
  email                String      @default("")
  phone                String      @default("")
  defaultPaymentMethod String      @default("cash")
  Review               Review[]
  promotions           Promotion[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  password          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Role {
  id    Int    @id()
  name  String
  users User[]
}

model Product {
  id               Int      @id() @default(autoincrement())
  name             String
  createdAt        DateTime @default(now())
  price            Decimal
  shortDescription String
  longDescription  String
  minimumAge       Int      @default(0)
  maximumAge       Int?
  videoUrl         String?
  image            String
  gallery          String[]

  Purchase   Purchase[]
  Review     Review[]
  promotions Promotion[]
}

model Purchase {
  id        String  @id @default(cuid())
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int
  productId Int
  Order     Order?  @relation(fields: [orderId], references: [id])
  orderId   String?
}

model Order {
  id            String     @id @default(cuid())
  products      Purchase[]
  createdOn     DateTime   @default(now())
  paymentMethod String
  user          User?      @relation(fields: [userId], references: [id])
  userId        String?
  firstName     String     @default("")
  lastName      String     @default("")
  phone         String     @default("")
  email         String     @default("")
  address       String     @default("")
  comments      String     @default("")
  isReturned    Boolean    @default(false)
}

model Review {
  id        Int      @id @default(autoincrement())
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  rating    Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  text      String
  createdOn DateTime @default(now())
}

model Promotion {
  id        String  @id @default(cuid())
  content   String
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  type      String
  promoCode String
  User      User?   @relation(fields: [userId], references: [id])
  userId    String?
  hasBeenChecked Boolean @default(false)
}
